'''
Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

Example 1:

Input: "()"
Output: true
Example 2:

Input: "()[]{}"
Output: true
Example 3:

Input: "(]"
Output: false
Example 4:

Input: "([)]"
Output: false
Example 5:

Input: "{[]}"
Output: true
'''

Solution:
class Solution {
    private HashMap<Character, Character> map;

    public Solution(){
        this.map = new HashMap<Character, Character>();
        this.map.put(')','(');
        this.map.put('}','{');
        this.map.put(']','[');
    }

    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for(int i=0; i<s.length(); i++){
            if(this.map.containsKey(s.charAt(i))){
                char top = stack.empty() ? 'r' : stack.pop();
                if(top != this.map.get(s.charAt(i))){
                    return false;
                }
            } else {
                stack.push(s.charAt(i));
            }
        }
        return stack.isEmpty();
    }
}

'''
喜欢java的一点，stack，hashmap真的很方便，而且在算法题目里面比较常用。
这里先用hashmap把括号配对
利用stack，左半边一律push，右半边是hashmap的key，如果containsKey，我们pop出stack的top后检查是否匹配（hashmap.get(key)=?top）
不匹配直接return false
最后检查stack是不是空的
'''
