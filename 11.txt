'''
Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.
Note: You may not slant the container and n is at least 2.
Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49
'''
My solution:
class Solution {
    public int maxArea(int[] height) {
        int left = 0;
        int right = height.length-1;
        int width = right;
        int result = 0;
        int temp = 0;
        while(left < right){
            if(height[left] < height [right]){
                temp = width * height[left];
                if(temp>result)
                    result = temp;
                left++;
            } else {
                temp = width * height[right];
                if(temp>result)
                    result = temp;
                right--;
            }
            width--;
        }
        return result;
    }
}

Upgraded with MAX/MIN function:
public class Solution {
    public int maxArea(int[] height) {
        int maxarea = 0, l = 0, r = height.length - 1;
        while (l < r) {
            maxarea = Math.max(maxarea, Math.min(height[l], height[r]) * (r - l));
            if (height[l] < height[r])
                l++;
            else
                r--;
        }
        return maxarea;
    }
}

'''
依旧是想不到比暴力解决更好的算法，看了答案启发才写出来了version1
左右标，保留数字更大的那个，移动数字小的那个，宽度按照移动次数减少
Math.max和Math.min可以帮忙缩减代码量，宽度还可以通过r-l计算
'''
