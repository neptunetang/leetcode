'''
Given a 32-bit signed integer, reverse digits of an integer.
Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range:
                                              [−2^31,  2^31 − 1].
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
'''
Solution:
class Solution {
    public int reverse(int x) {
        int result = 0;
        while(x!=0){
            int pop = x%10;
            x /= 10;
            if (result > Integer.MAX_VALUE/10 || (result == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
            if (result < Integer.MIN_VALUE/10 || (result == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            result = result*10 + pop;
        }
        return result;
    }
}

'''
反转数字
%得到末尾数字pop，/得到下一个x
每一次都要result*10+pop来实现反转

检查超出范围的情况
  result > Integer.MAX_VALUE/10和result < Integer.MIN_VALUE/10比较能理解
  自己的理解：  2^31 末尾数字为8，2^31-1 以7结尾，-2^31以8结尾，所以当 result == Integer.MAX_VALUE && pop<=7的时候还没有超过界限
  同理：result == Integer.MIN_VALUE / 10 && pop > -8 也没有超过

超出范围这个一开始没有想通，以后要review
'''
