"""
Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

"""

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i=0; i<nums.length; i++){
            int complement = target - nums[i];
            if(map.containsKey(complement))
                return new int[] {map.get(complement), i};
            map.put(nums[i], i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}

"""
Summary：
暴力解法：
两层for loop
for(int i=0; i<nums.length; i++){
  for(int j=i+1; j<nums.length; j++){
    if(nums[i] + nums[j] == target)
      return new int [] {i, j}
  }
}
Time complexity O(n^2)
Space complexity O(1)
最容易想到，但是时间复杂度过高，寻求新解法

使用hashmap
key为给的array里所有的数字，key对应的identifier为数字的index
一个for loop遍历array里的所有数字，计算complement(target - nums[i])，查找这个complement是不是在hashmap的key里，
有就返回i和key所对应的index，将该数字添加进hashmap
for loop结束后仍然没有返回值， 抛出异常

using HashMap
hashmap has key and identifier. key is the number in the given array and identifier is the index of the number
in the array.
using for loop to go through all the numbers in the array and calculate the complement(target - nums[i]) of
each number, first using containskey to search for the complement, if contains, return the array {map.get(complement), i}
else just put the number in to the hashmap.
after for loop, if nothing has been return, throw an exception.

Time complexity O(n)
Space complexity O(n)
"""
